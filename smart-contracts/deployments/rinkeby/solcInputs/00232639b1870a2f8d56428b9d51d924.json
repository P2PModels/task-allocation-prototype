{
  "language": "Solidity",
  "sources": {
    "contracts/allocation-models/FCFSTAA.sol": {
      "content": "pragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../BaseTaskAllocation.sol\";\n\n// Round Robin Task Allocation App\ncontract FCFSTAA is BaseTaskAllocation {\n\n    using SafeMath for uint256;\n\n    /// Events\n    event TaskCreated(bytes32 indexed taskId);\n    event TaskDeleted(bytes32 indexed taskId);\n    event TaskAccepted(bytes32 indexed userId, bytes32 indexed taskId);\n    event UserRegistered(bytes32 indexed userId);\n    event UserDeleted(bytes32 indexed userId);\n\n    /// Task statuses\n    enum Status {\n        NonExistent,\n        Available,\n        Accepted,\n        Completed\n    }\n\n    mapping(bytes32 => Task) tasks;\n\n    // List of task ids used for restarting purposes\n    bytes32[] taskIds;\n\n    mapping(bytes32 => User) users;\n\n    //Need it to transvers users array more gracefuly. \n    mapping(uint256 => bytes32) private userIndexToId;\n    uint256 private numberOfUsers;\n\n    //To keep record of user's assignments and control that users can only \n    // have 1 task accepted\n    /*\n     * Key: userId\n     */\n    mapping(bytes32 => bool) userTaskRegistry;\n\n    struct User {\n        uint256 index;\n        bool exists; // Check if the user exists in the mapping\n    }\n\n    struct Task {\n        uint256 userIndex;\n        uint256 endDate; // When the task should be removed\n        Status status; // Take one of the statuses value\n    }\n\n    uint32 constant public TIME_TO_ACCEPT_TASK = 259200; // 3 days \n\n    ///Errors\n    string private constant ERROR_USER_HAS_TASK = \"USER_HAS_TASK\";\n    string private constant ERROR_USER_ALREADY_EXISTS = \"USER_ALREADY_EXISTS\";\n    string private constant ERROR_USER_DONT_EXIST = \"USER_DONT_EXIST\";\n    string private constant ERROR_TASK_EXISTS = \"TASK_EXISTS\";\n    string private constant ERROR_TASK_DONT_EXIST = \"TASK_DONT_EXIST\";\n    string private constant ERROR_TASK_ALLOCATION = \"TASK_ALLOCATION_FAIL\";\n    string private constant ERROR_TASK_NOT_AVAILABLE = \"TASK_NOT_AVAILABLE\";\n\n    // Verification functions\n    modifier userHasNoTask(bytes32 _userId) {\n        require(!userTaskRegistry[_userId], ERROR_USER_HAS_TASK);\n        _;\n    }\n    modifier userDontExist(bytes32 _userId) {\n        require(!users[_userId].exists, ERROR_USER_ALREADY_EXISTS);\n        _;\n    }\n    modifier userExists(bytes32 _userId) {\n        require(users[_userId].exists, ERROR_USER_DONT_EXIST);\n        _;\n    }\n    modifier taskDontExist(bytes32 _taskId) {\n        require(tasks[_taskId].status == Status.NonExistent, ERROR_TASK_EXISTS);\n        _;\n    }\n    modifier taskExists(bytes32 _taskId) {\n        require(tasks[_taskId].status != Status.NonExistent, ERROR_TASK_DONT_EXIST);\n        _;\n    }\n    modifier taskAvailable(bytes32 _taskId) {\n        Task storage task = tasks[_taskId];\n        require(task.status == Status.Available, ERROR_TASK_NOT_AVAILABLE);\n        _;\n    }\n\n    // Function used to register users\n    function registerUser(bytes32 _userId)\n    external\n    userDontExist(_userId)\n    {\n        userIndexToId[numberOfUsers] = _userId;\n        users[_userId].index = numberOfUsers;\n        users[_userId].exists = true;\n\n        numberOfUsers = numberOfUsers.add(1);\n\n        emit UserRegistered(_userId);\n    }\n\n    /**\n     * @notice Create a new task.\n     * @param _taskId The task's id.\n     */\n    function createTask(\n        bytes32 _taskId\n    )\n    external\n    taskDontExist(_taskId)\n    {\n        Task storage task = tasks[_taskId];\n        task.userIndex = 0;\n        task.endDate = block.timestamp.add(TIME_TO_ACCEPT_TASK);\n        task.status = Status.Available;\n\n        taskIds.push(_taskId);\n        emit TaskCreated(_taskId);\n    }\n\n    // TODO \n    // Fucntion that removes the task once the endDate time has expired\n    // function removeTask(\n    //     bytes32 _taskId\n    // )\n    // public\n    // taskExists(_taskId)\n    // {\n        \n    // }\n\n    // Function called when a user accepts a task\n    function acceptTask(\n        bytes32 _userId,\n        bytes32 _taskId\n    )\n    external\n    userExists(_userId)\n    taskExists(_taskId)\n    taskAvailable(_taskId)\n    userHasNoTask(_userId)\n    {\n        userTaskRegistry[_userId] = true;\n\n        tasks[_taskId].status = Status.Accepted;\n        tasks[_taskId].userIndex = users[_userId].index;\n        \n        emit TaskAccepted(_userId, _taskId);\n    }\n\n\n     // Function used to clean up the contract\n    function restart() override external {\n         // Remove tasks\n        for (uint i = 0; i < taskIds.length; i++) {\n            bytes32 tId = taskIds[i];\n            Task storage task = tasks[tId];\n\n            // Set the status of the task to non-existent\n            task.status = Status.NonExistent;\n\n            // Emit an event indicating that task has been deleted\n            emit TaskDeleted(tId);\n        }\n\n        // Remove users\n        for (uint k = 0; k < numberOfUsers; k++) {\n            bytes32 uId = userIndexToId[k];\n            User storage user = users[uId];\n            user.exists = false;\n\n            userTaskRegistry[uId] = false;\n\n            emit UserDeleted(uId);\n        }\n\n        delete taskIds;\n\n        numberOfUsers = 0;\n\n        emit TasksRestart(msg.sender);\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/BaseTaskAllocation.sol": {
      "content": "pragma solidity ^0.8.4;\n\nabstract contract BaseTaskAllocation {\n    /// Events\n    event TasksRestart(address indexed entity);\n    event ApiUrlSet(string apiUrl);\n\n    /// State\n    string public apiUrl;\n\n    /// ACL\n    // bytes32 constant public ALLOCATE_TASK_ROLE = keccak256(\"ALLOCATE_TASK_ROLE\");\n    // bytes32 constant public GET_TASK_ROLE = keccak256(\"GET_TASK_ROLE\");\n    // bytes32 constant public CREATE_TASK_ROLE = keccak256(\"CREATE_TASK_ROLE\");\n    // bytes32 constant public CREATE_USER_ROLE = keccak256(\"CREATE_USER_ROLE\");\n    // bytes32 constant public RESTART_APP_ROLE = keccak256(\"RESTART_APP_ROLE\");\n\n    function setApiUrl(string calldata _apiUrl) external {\n        apiUrl = _apiUrl;\n        emit ApiUrlSet(_apiUrl);\n    }\n\n    function restart() virtual external {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}