{
  "language": "Solidity",
  "sources": {
    "contracts/allocation-models/RoundRobinTAA.sol": {
      "content": "pragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../BaseTaskAllocation.sol\";\n\n// Round Robin Task Allocation App\ncontract RoundRobinTAA is BaseTaskAllocation {\n    using SafeMath for uint256;\n\n    /// Events\n    event TaskCreated(bytes32 indexed taskId);\n    event TaskDeleted(bytes32 indexed taskId);\n    event TaskAccepted(bytes32 indexed userId, bytes32 indexed taskId);\n    event TaskRejected(bytes32 indexed userId, bytes32 indexed taskId);\n    event TaskAllocated(bytes32 indexed userId, bytes32 indexed taskId, bytes32 previousUserId);\n    event UserRegistered(bytes32 indexed userId);\n    event UserDeleted(bytes32 indexed userId);\n    event RejecterDeleted(bytes32 indexed userId, bytes32 indexed taskId);\n\n    /// Task statuses\n    enum Status {\n        NonExistent,\n        Available,\n        Assigned,\n        Accepted,\n        Rejected,\n        Completed\n    }\n\n    mapping(bytes32 => Task) tasks;\n\n    // List of task ids used for restarting purposes\n    bytes32[] taskIds;\n\n    mapping(bytes32 => User) users;\n\n    //Need it to transvers users array more gracefuly. \n    mapping(uint256 => bytes32) private userIndex;\n    uint256 private userIndexLength;\n\n    //To keep record of user's assignments and control that users can only \n    // have 1 task accepted\n    /*\n     * Key: userId\n     */\n    mapping(bytes32 => bool) userTaskRegistry;\n\n    struct User {\n        uint256 index;\n        uint256 benefits;  // <-- to be used in the future to award users for tasks completed\n        bool available;\n        // Check if the user exists in the mapping\n        bool exists;\n        // List of tasks assigned to the user\n        mapping(uint256 => bytes32) allocatedTasks;\n        uint256 allocatedTasksLength;\n    }\n\n    struct Task {\n        uint256 userIndex;\n        // Need this to remove task when being reallocated\n        uint256 allocationIndex;\n        // Indicate when the task should be reasigned\n        uint256 endDate;\n        // Take one of the statuses value\n        Status status;\n        // List of users who rejected the task\n        mapping(bytes32 => bool) rejecters;\n        // Indicate how often, in seconds, the task will be reasigned\n        uint256 reallocationTime;\n        // bytes32 languageGroup. // <-- to be used in the future\n    }\n\n\n    // Indicate the maximum number of tasks that can assigned to users\n    uint8 constant public MAX_ALLOCATED_TASKS = 3;\n\n    ///Errors\n    string private constant ERROR_ASSIGNED_TASK = \"TASK_ALREADY_ASSIGNED\";\n    string private constant ERROR_USER_HAS_TASK = \"USER_HAS_TASK\";\n    string private constant ERROR_USER_ALREADY_EXISTS = \"USER_ALREADY_EXISTS\";\n    string private constant ERROR_USER_DONT_EXIST = \"USER_DONT_EXIST\";\n    string private constant ERROR_TASK_EXISTS = \"TASK_EXISTS\";\n    string private constant ERROR_TASK_DONT_EXIST = \"TASK_DONT_EXIST\";\n    string private constant ERROR_TASK_ALLOCATION = \"TASK_ALLOCATION_FAIL\";\n    string private constant ERROR_TASK_NOT_ASSIGNED_TO_USER = \"TASK_NOT_ASSIGNED_TO_USER\";\n    string private constant ERROR_USER_HAS_TOO_MANY_TASKS = \"USER_HAS_TOO_MANY_TASKS\";\n\n    // Verification functions\n    modifier userHasNoTask(bytes32 _userId) {\n        require(!userTaskRegistry[_userId], ERROR_USER_HAS_TASK);\n        _;\n    }\n\n    modifier userDontExist(bytes32 _userId) {\n        require(!users[_userId].exists, ERROR_USER_ALREADY_EXISTS);\n        _;\n    }\n\n    modifier userExists(bytes32 _userId) {\n        require(users[_userId].exists, ERROR_USER_DONT_EXIST);\n        _;\n    }\n\n    modifier taskDontExist(bytes32 _taskId) {\n        require(tasks[_taskId].status == Status.NonExistent, ERROR_TASK_EXISTS);\n        _;\n    }\n\n    modifier taskExists(bytes32 _taskId) {\n        require(tasks[_taskId].status != Status.NonExistent, ERROR_TASK_DONT_EXIST);\n        _;\n    }\n\n    // Check if the task was previously assigned to user\n    modifier taskAssigned(bytes32 _taskId, bytes32 _userId) {\n        Task storage task = tasks[_taskId];\n        bytes32 userId = userIndex[task.userIndex];\n        require(task.status == Status.Assigned && _userId == userId, ERROR_TASK_NOT_ASSIGNED_TO_USER);\n        _;\n    }\n\n    modifier tooManyTasks(bytes32 _userId) {\n        require(users[_userId].allocatedTasksLength <=  MAX_ALLOCATED_TASKS, ERROR_USER_HAS_TOO_MANY_TASKS);\n        _;\n    }\n\n    // Contract \"constructor\"\n    // function initialize() public onlyInit {\n    //     initialized();\n    // }\n\n    // Function used to clean up the contract\n    function restart() override external {\n         // Remove tasks\n        for (uint i = 0; i < taskIds.length; i++) {\n            bytes32 tId = taskIds[i];\n            Task storage task = tasks[tId];\n\n            // Delete rejecters of the task. Need to empty mapping manually.\n            for (uint j = 0; j < userIndexLength; j++) {\n                bytes32 rId = userIndex[j];\n                task.rejecters[rId] = false;\n                emit RejecterDeleted(rId, tId);\n            }\n\n            // Set the status of the task to non-existent\n            task.status = Status.NonExistent;\n\n            // Emit an event indicating that task has been deleted\n            emit TaskDeleted(tId);\n        }\n\n        // Remove users\n        for (uint k = 0; k < userIndexLength; k++) {\n            bytes32 uId = userIndex[k];\n            User storage user = users[uId];\n            user.exists = false;\n            // Need to empty mapping manually. \n            user.allocatedTasksLength = 0;\n\n            userTaskRegistry[uId] = false;\n\n            emit UserDeleted(uId);\n        }\n\n        delete taskIds;\n\n        userIndexLength = 0;\n\n        emit TasksRestart(msg.sender);\n    }\n\n    // Function used to register users\n    function registerUser(bytes32 _userId)\n    external\n    userDontExist(_userId)\n    {\n        userIndex[userIndexLength] = _userId;\n        users[_userId].index = userIndexLength;\n        users[_userId].available = true;\n        users[_userId].exists = true;\n        users[_userId].benefits = 0;\n        users[_userId].allocatedTasksLength = 0;\n\n        userIndexLength = userIndexLength.add(1);\n\n        emit UserRegistered(_userId);\n    }\n\n    /**\n     * @notice Create a new task.\n     * @param _taskId The task's id.\n     */\n    function createTask(\n        // bytes32 _languageGroup,\n        bytes32 _taskId,\n        uint256 reallocationTime\n    )\n    external\n    taskDontExist(_taskId)\n    {\n        Task storage task = tasks[_taskId];\n        task.status = Status.Available;\n        task.userIndex = 0;\n        task.allocationIndex = 0;\n        task.endDate = 0;\n        task.reallocationTime = reallocationTime;\n\n        taskIds.push(_taskId);\n        emit TaskCreated(_taskId);\n    }\n\n    // Call the function that assigns a task to a user\n    function allocateTask(\n        bytes32 _taskId,\n        bytes32 _userId\n    )\n    external\n    taskExists(_taskId)\n    userExists(_userId)\n    {\n        bool allocated = addUserAllocatedTask(_userId, _taskId);\n        require(allocated, ERROR_TASK_ALLOCATION);\n        emit TaskAllocated(_userId, _taskId, 0);\n    }\n\n    // Function called when a user accepts a task\n    function acceptTask(\n        bytes32 _userId,\n        bytes32 _taskId\n    )\n    external\n    userExists(_userId)\n    taskAssigned(_taskId, _userId)\n    userHasNoTask(_userId)\n    {\n        tasks[_taskId].status = Status.Accepted;\n        userTaskRegistry[_userId] = true;\n        //Can't access mapping inside user struct\n        //unless It's declare using storage keyword.\n        User storage user = users[_userId];\n        bytes32 currentTaskId;\n        // When a user accepts a task and since users are restricted to have \n        // only one task accepted the rest of task asigned to the user are \n        // reallocated\n        for (uint i = 0; i < user.allocatedTasksLength; i++) {\n            currentTaskId = user.allocatedTasks[i];\n            if (currentTaskId != _taskId) {\n                reallocateTask(currentTaskId);\n            }\n        }\n        emit TaskAccepted(_userId, _taskId);\n    }\n\n    // Function used when a user rejects a task\n    function rejectTask(\n        bytes32 _userId,\n        bytes32 _taskId\n    )\n    external\n    userExists(_userId)\n    taskAssigned(_taskId, _userId)\n    {\n        tasks[_taskId].rejecters[_userId] = true;\n        emit TaskRejected(_userId, _taskId);\n    }\n\n    // Fucntion that implements the round-robin\n    // algorithm\n    function reallocateTask(\n        bytes32 _taskId\n    )\n    public\n    taskExists(_taskId)\n    {\n        Task storage task = tasks[_taskId];\n        uint oldUserIndex = task.userIndex;\n        bytes32 oldUserId = userIndex[oldUserIndex];\n        uint newUserIndex = oldUserIndex.add(1);\n        bool assigneeFounded = false;\n        uint userCounter = 0;\n        \n        // Delete task from the previous \"owner\"\n        deleteUserAllocatedTask(oldUserId, _taskId);\n        \n        // Iterate until find a user to whom assign the task or\n        // the array of users was totally traversed\n        while (userCounter < userIndexLength && !assigneeFounded) {\n            // Check if index arrives to the end of the round\n            // then it should start over\n            if (newUserIndex == userIndexLength) {\n                newUserIndex = 0;\n            }\n            bytes32 currUserId = userIndex[newUserIndex];\n            // Try to assigned that task to user (currUserId)\n            assigneeFounded = addUserAllocatedTask(currUserId, _taskId);\n            // If assignation was successful emit event TaskAllocated\n            if (assigneeFounded) {\n                emit TaskAllocated(userIndex[newUserIndex], _taskId, oldUserId);\n            } else {\n                // If assignation did not work out increase counters to\n                // continue with the round robin\n                userCounter = userCounter.add(1);\n                newUserIndex = newUserIndex.add(1);\n            }\n        }\n        // Assign rejected status to the task if it couldn't be assigned to\n        // a user\n        if (!assigneeFounded) {\n            task.status = Status.Rejected;\n        }\n    }\n\n    // Function used to assign a task to a user\n    function addUserAllocatedTask(\n        bytes32 _userId,\n        bytes32 _taskId\n    )\n    private\n    returns (bool)\n    {\n        User storage user = users[_userId];\n        Task storage task = tasks[_taskId];\n\n        // User doesn't have a task already and didn't reject current task.\n        if (user.available && !userTaskRegistry[_userId] && !task.rejecters[_userId]\n            && user.allocatedTasksLength <=  MAX_ALLOCATED_TASKS) {\n\n            user.allocatedTasks[user.allocatedTasksLength] = _taskId;\n            task.allocationIndex = user.allocatedTasksLength;\n            user.allocatedTasksLength = user.allocatedTasksLength.add(1);\n\n            task.userIndex = user.index;\n            task.status = Status.Assigned;\n            task.endDate = block.timestamp.add(task.reallocationTime);\n\n            return true;\n        }\n        return false;\n    }\n\n    function deleteUserAllocatedTask(\n        bytes32 _userId,\n        bytes32 _taskId\n    )\n    private\n    {\n        User storage user = users[_userId];\n        uint256 lastTaskIndex;\n        bytes32 lastTask;\n        uint256 allocatedTaskIndex = tasks[_taskId].allocationIndex;\n        if(user.allocatedTasksLength > 0) {\n            lastTaskIndex = user.allocatedTasksLength.sub(1);\n\n        }\n        else {\n            lastTaskIndex = user.allocatedTasksLength;\n        }\n        lastTask = user.allocatedTasks[lastTaskIndex];\n        user.allocatedTasksLength = lastTaskIndex;\n        user.allocatedTasks[allocatedTaskIndex] = lastTask;\n    }\n\n    // Getters\n\n    function getUser(\n        bytes32 _userId\n    )\n    external\n    view\n    returns (\n        uint256 index,\n        uint256 benefits,\n        bool available,\n        bool exists,\n        uint256 allocatedTasksLength\n    )\n    {\n        User storage user = users[_userId];\n        index = user.index;\n        benefits = user.benefits;\n        available = user.available;\n        exists = user.exists;\n        allocatedTasksLength = user.allocatedTasksLength;\n    }\n\n    function getAllocatedTask(\n        bytes32 _userId,\n        uint256 _taskIndex\n    )\n    external\n    view\n    returns (\n        bytes32\n    )\n    {\n        return users[_userId].allocatedTasks[_taskIndex];\n    }\n\n    function getTask(bytes32 _taskId)\n    external\n    view\n    returns (\n        bytes32 assignee,\n        uint256 allocationIndex,\n        uint256 endDate,\n        Status status,\n        uint256 reallocationTime\n    ) \n    {\n        Task storage task = tasks[_taskId];\n\n        assignee = userIndex[task.userIndex];\n        allocationIndex = task.allocationIndex;\n        endDate = task.endDate;\n        status = task.status;\n        reallocationTime = task.reallocationTime;\n    }\n\n    function getRejecter(bytes32 _taskId, bytes32 _userId)\n    external\n    view\n    returns (\n        bool\n    )\n    {\n        return tasks[_taskId].rejecters[_userId];\n    }\n\n    function getUserLength()\n    external\n    view\n    returns (\n        uint\n    )\n    {\n        return userIndexLength;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/BaseTaskAllocation.sol": {
      "content": "pragma solidity ^0.8.4;\n\nabstract contract BaseTaskAllocation {\n    /// Events\n    event TasksRestart(address indexed entity);\n    event ApiUrlSet(string apiUrl);\n\n    /// State\n    string public apiUrl;\n\n    /// ACL\n    // bytes32 constant public ALLOCATE_TASK_ROLE = keccak256(\"ALLOCATE_TASK_ROLE\");\n    // bytes32 constant public GET_TASK_ROLE = keccak256(\"GET_TASK_ROLE\");\n    // bytes32 constant public CREATE_TASK_ROLE = keccak256(\"CREATE_TASK_ROLE\");\n    // bytes32 constant public CREATE_USER_ROLE = keccak256(\"CREATE_USER_ROLE\");\n    // bytes32 constant public RESTART_APP_ROLE = keccak256(\"RESTART_APP_ROLE\");\n\n    function setApiUrl(string calldata _apiUrl) external {\n        apiUrl = _apiUrl;\n        emit ApiUrlSet(_apiUrl);\n    }\n\n    function restart() virtual external {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}