// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Task extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Task entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Task entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Task", id.toString(), this);
  }

  static load(id: string): Task | null {
    return store.get("Task", id) as Task | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get endDate(): BigInt {
    let value = this.get("endDate");
    return value.toBigInt();
  }

  set endDate(value: BigInt) {
    this.set("endDate", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get reallocationTime(): BigInt {
    let value = this.get("reallocationTime");
    return value.toBigInt();
  }

  set reallocationTime(value: BigInt) {
    this.set("reallocationTime", Value.fromBigInt(value));
  }

  get assignee(): string | null {
    let value = this.get("assignee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set assignee(value: string | null) {
    if (value === null) {
      this.unset("assignee");
    } else {
      this.set("assignee", Value.fromString(value as string));
    }
  }

  get rejecterUsers(): Array<string | null> {
    let value = this.get("rejecterUsers");
    return value.toStringArray();
  }

  set rejecterUsers(value: Array<string | null>) {
    this.set("rejecterUsers", Value.fromStringArray(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get benefits(): BigInt {
    let value = this.get("benefits");
    return value.toBigInt();
  }

  set benefits(value: BigInt) {
    this.set("benefits", Value.fromBigInt(value));
  }

  get available(): boolean {
    let value = this.get("available");
    return value.toBoolean();
  }

  set available(value: boolean) {
    this.set("available", Value.fromBoolean(value));
  }

  get rejectedTasks(): Array<string | null> {
    let value = this.get("rejectedTasks");
    return value.toStringArray();
  }

  set rejectedTasks(value: Array<string | null>) {
    this.set("rejectedTasks", Value.fromStringArray(value));
  }
}
