// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApiUrlSet extends ethereum.Event {
  get params(): ApiUrlSet__Params {
    return new ApiUrlSet__Params(this);
  }
}

export class ApiUrlSet__Params {
  _event: ApiUrlSet;

  constructor(event: ApiUrlSet) {
    this._event = event;
  }

  get apiUrl(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class RejecterDeleted extends ethereum.Event {
  get params(): RejecterDeleted__Params {
    return new RejecterDeleted__Params(this);
  }
}

export class RejecterDeleted__Params {
  _event: RejecterDeleted;

  constructor(event: RejecterDeleted) {
    this._event = event;
  }

  get userId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get taskId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class TaskAccepted extends ethereum.Event {
  get params(): TaskAccepted__Params {
    return new TaskAccepted__Params(this);
  }
}

export class TaskAccepted__Params {
  _event: TaskAccepted;

  constructor(event: TaskAccepted) {
    this._event = event;
  }

  get userId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get taskId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class TaskAllocated extends ethereum.Event {
  get params(): TaskAllocated__Params {
    return new TaskAllocated__Params(this);
  }
}

export class TaskAllocated__Params {
  _event: TaskAllocated;

  constructor(event: TaskAllocated) {
    this._event = event;
  }

  get userId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get taskId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get previousUserId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class TaskCreated extends ethereum.Event {
  get params(): TaskCreated__Params {
    return new TaskCreated__Params(this);
  }
}

export class TaskCreated__Params {
  _event: TaskCreated;

  constructor(event: TaskCreated) {
    this._event = event;
  }

  get taskId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class TaskDeleted extends ethereum.Event {
  get params(): TaskDeleted__Params {
    return new TaskDeleted__Params(this);
  }
}

export class TaskDeleted__Params {
  _event: TaskDeleted;

  constructor(event: TaskDeleted) {
    this._event = event;
  }

  get taskId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class TaskRejected extends ethereum.Event {
  get params(): TaskRejected__Params {
    return new TaskRejected__Params(this);
  }
}

export class TaskRejected__Params {
  _event: TaskRejected;

  constructor(event: TaskRejected) {
    this._event = event;
  }

  get userId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get taskId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class TasksRestart extends ethereum.Event {
  get params(): TasksRestart__Params {
    return new TasksRestart__Params(this);
  }
}

export class TasksRestart__Params {
  _event: TasksRestart;

  constructor(event: TasksRestart) {
    this._event = event;
  }

  get entity(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UserDeleted extends ethereum.Event {
  get params(): UserDeleted__Params {
    return new UserDeleted__Params(this);
  }
}

export class UserDeleted__Params {
  _event: UserDeleted;

  constructor(event: UserDeleted) {
    this._event = event;
  }

  get userId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class UserRegistered extends ethereum.Event {
  get params(): UserRegistered__Params {
    return new UserRegistered__Params(this);
  }
}

export class UserRegistered__Params {
  _event: UserRegistered;

  constructor(event: UserRegistered) {
    this._event = event;
  }

  get userId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class RoundRobinTAA__getTaskResult {
  value0: Bytes;
  value1: BigInt;
  value2: BigInt;
  value3: i32;
  value4: BigInt;

  constructor(
    value0: Bytes,
    value1: BigInt,
    value2: BigInt,
    value3: i32,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class RoundRobinTAA__getUserResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;
  value3: boolean;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: boolean,
    value3: boolean,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class RoundRobinTAA extends ethereum.SmartContract {
  static bind(address: Address): RoundRobinTAA {
    return new RoundRobinTAA("RoundRobinTAA", address);
  }

  MAX_ALLOCATED_TASKS(): i32 {
    let result = super.call(
      "MAX_ALLOCATED_TASKS",
      "MAX_ALLOCATED_TASKS():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_MAX_ALLOCATED_TASKS(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "MAX_ALLOCATED_TASKS",
      "MAX_ALLOCATED_TASKS():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  apiUrl(): string {
    let result = super.call("apiUrl", "apiUrl():(string)", []);

    return result[0].toString();
  }

  try_apiUrl(): ethereum.CallResult<string> {
    let result = super.tryCall("apiUrl", "apiUrl():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getAllocatedTask(_userId: Bytes, _taskIndex: BigInt): Bytes {
    let result = super.call(
      "getAllocatedTask",
      "getAllocatedTask(bytes32,uint256):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(_userId),
        ethereum.Value.fromUnsignedBigInt(_taskIndex)
      ]
    );

    return result[0].toBytes();
  }

  try_getAllocatedTask(
    _userId: Bytes,
    _taskIndex: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getAllocatedTask",
      "getAllocatedTask(bytes32,uint256):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(_userId),
        ethereum.Value.fromUnsignedBigInt(_taskIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRejecter(_taskId: Bytes, _userId: Bytes): boolean {
    let result = super.call(
      "getRejecter",
      "getRejecter(bytes32,bytes32):(bool)",
      [
        ethereum.Value.fromFixedBytes(_taskId),
        ethereum.Value.fromFixedBytes(_userId)
      ]
    );

    return result[0].toBoolean();
  }

  try_getRejecter(
    _taskId: Bytes,
    _userId: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getRejecter",
      "getRejecter(bytes32,bytes32):(bool)",
      [
        ethereum.Value.fromFixedBytes(_taskId),
        ethereum.Value.fromFixedBytes(_userId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getTask(_taskId: Bytes): RoundRobinTAA__getTaskResult {
    let result = super.call(
      "getTask",
      "getTask(bytes32):(bytes32,uint256,uint256,uint8,uint256)",
      [ethereum.Value.fromFixedBytes(_taskId)]
    );

    return new RoundRobinTAA__getTaskResult(
      result[0].toBytes(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toI32(),
      result[4].toBigInt()
    );
  }

  try_getTask(
    _taskId: Bytes
  ): ethereum.CallResult<RoundRobinTAA__getTaskResult> {
    let result = super.tryCall(
      "getTask",
      "getTask(bytes32):(bytes32,uint256,uint256,uint8,uint256)",
      [ethereum.Value.fromFixedBytes(_taskId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RoundRobinTAA__getTaskResult(
        value[0].toBytes(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toI32(),
        value[4].toBigInt()
      )
    );
  }

  getUser(_userId: Bytes): RoundRobinTAA__getUserResult {
    let result = super.call(
      "getUser",
      "getUser(bytes32):(uint256,uint256,bool,bool,uint256)",
      [ethereum.Value.fromFixedBytes(_userId)]
    );

    return new RoundRobinTAA__getUserResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean(),
      result[3].toBoolean(),
      result[4].toBigInt()
    );
  }

  try_getUser(
    _userId: Bytes
  ): ethereum.CallResult<RoundRobinTAA__getUserResult> {
    let result = super.tryCall(
      "getUser",
      "getUser(bytes32):(uint256,uint256,bool,bool,uint256)",
      [ethereum.Value.fromFixedBytes(_userId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RoundRobinTAA__getUserResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean(),
        value[3].toBoolean(),
        value[4].toBigInt()
      )
    );
  }

  getUserLength(): BigInt {
    let result = super.call("getUserLength", "getUserLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getUserLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserLength",
      "getUserLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AcceptTaskCall extends ethereum.Call {
  get inputs(): AcceptTaskCall__Inputs {
    return new AcceptTaskCall__Inputs(this);
  }

  get outputs(): AcceptTaskCall__Outputs {
    return new AcceptTaskCall__Outputs(this);
  }
}

export class AcceptTaskCall__Inputs {
  _call: AcceptTaskCall;

  constructor(call: AcceptTaskCall) {
    this._call = call;
  }

  get _userId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _taskId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class AcceptTaskCall__Outputs {
  _call: AcceptTaskCall;

  constructor(call: AcceptTaskCall) {
    this._call = call;
  }
}

export class AllocateTaskCall extends ethereum.Call {
  get inputs(): AllocateTaskCall__Inputs {
    return new AllocateTaskCall__Inputs(this);
  }

  get outputs(): AllocateTaskCall__Outputs {
    return new AllocateTaskCall__Outputs(this);
  }
}

export class AllocateTaskCall__Inputs {
  _call: AllocateTaskCall;

  constructor(call: AllocateTaskCall) {
    this._call = call;
  }

  get _taskId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _userId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class AllocateTaskCall__Outputs {
  _call: AllocateTaskCall;

  constructor(call: AllocateTaskCall) {
    this._call = call;
  }
}

export class CreateTaskCall extends ethereum.Call {
  get inputs(): CreateTaskCall__Inputs {
    return new CreateTaskCall__Inputs(this);
  }

  get outputs(): CreateTaskCall__Outputs {
    return new CreateTaskCall__Outputs(this);
  }
}

export class CreateTaskCall__Inputs {
  _call: CreateTaskCall;

  constructor(call: CreateTaskCall) {
    this._call = call;
  }

  get _taskId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get reallocationTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateTaskCall__Outputs {
  _call: CreateTaskCall;

  constructor(call: CreateTaskCall) {
    this._call = call;
  }
}

export class ReallocateTaskCall extends ethereum.Call {
  get inputs(): ReallocateTaskCall__Inputs {
    return new ReallocateTaskCall__Inputs(this);
  }

  get outputs(): ReallocateTaskCall__Outputs {
    return new ReallocateTaskCall__Outputs(this);
  }
}

export class ReallocateTaskCall__Inputs {
  _call: ReallocateTaskCall;

  constructor(call: ReallocateTaskCall) {
    this._call = call;
  }

  get _taskId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ReallocateTaskCall__Outputs {
  _call: ReallocateTaskCall;

  constructor(call: ReallocateTaskCall) {
    this._call = call;
  }
}

export class RegisterUserCall extends ethereum.Call {
  get inputs(): RegisterUserCall__Inputs {
    return new RegisterUserCall__Inputs(this);
  }

  get outputs(): RegisterUserCall__Outputs {
    return new RegisterUserCall__Outputs(this);
  }
}

export class RegisterUserCall__Inputs {
  _call: RegisterUserCall;

  constructor(call: RegisterUserCall) {
    this._call = call;
  }

  get _userId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RegisterUserCall__Outputs {
  _call: RegisterUserCall;

  constructor(call: RegisterUserCall) {
    this._call = call;
  }
}

export class RejectTaskCall extends ethereum.Call {
  get inputs(): RejectTaskCall__Inputs {
    return new RejectTaskCall__Inputs(this);
  }

  get outputs(): RejectTaskCall__Outputs {
    return new RejectTaskCall__Outputs(this);
  }
}

export class RejectTaskCall__Inputs {
  _call: RejectTaskCall;

  constructor(call: RejectTaskCall) {
    this._call = call;
  }

  get _userId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _taskId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RejectTaskCall__Outputs {
  _call: RejectTaskCall;

  constructor(call: RejectTaskCall) {
    this._call = call;
  }
}

export class RestartCall extends ethereum.Call {
  get inputs(): RestartCall__Inputs {
    return new RestartCall__Inputs(this);
  }

  get outputs(): RestartCall__Outputs {
    return new RestartCall__Outputs(this);
  }
}

export class RestartCall__Inputs {
  _call: RestartCall;

  constructor(call: RestartCall) {
    this._call = call;
  }
}

export class RestartCall__Outputs {
  _call: RestartCall;

  constructor(call: RestartCall) {
    this._call = call;
  }
}

export class SetApiUrlCall extends ethereum.Call {
  get inputs(): SetApiUrlCall__Inputs {
    return new SetApiUrlCall__Inputs(this);
  }

  get outputs(): SetApiUrlCall__Outputs {
    return new SetApiUrlCall__Outputs(this);
  }
}

export class SetApiUrlCall__Inputs {
  _call: SetApiUrlCall;

  constructor(call: SetApiUrlCall) {
    this._call = call;
  }

  get _apiUrl(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetApiUrlCall__Outputs {
  _call: SetApiUrlCall;

  constructor(call: SetApiUrlCall) {
    this._call = call;
  }
}
